class DisjointSet {

    vector<int> parent;
    vector<int> size; // no of nodes in the component under that parent

public :

    DisjointSet(int n){

        parent.resize(n+1);
        size.resize(n+1, 1);

        for(int i=0; i<=n ;i++){
            parent[i] = i;
        }
    }

    int findUParent(int node){

        if(node == parent[node]){
            return node;
        }

        return parent[node] = findUParent(parent[node]); // compression by storing the ultimate- parent

    }

    

    void unionBySize(int u, int v){

        int pu = findUParent(u);
        int pv = findUParent(v);

        if(pu == pv) return;

        if(size[pu] < size[pv]){
            parent[pu] = pv;
            size[pv] += size[pu]; // when components are attached then the no of nodes also adds up.
        }
        else if(size[pu] > size[pv]){
            parent[pv] = pu;
            size[pu] += size[pv];
        }
        else {
            parent[pu] = pv;
            size[pv] += size[pu];
        }
    }

};

class Solution {
  public:
    vector<vector<string>> accountsMerge(vector<vector<string>> &accounts) {
        
        int n = accounts.size();
        
        unordered_map<string, int> mp;
        DisjointSet ds(n);
        
        for(int i = 0 ; i<accounts.size(); i++){
            for(int j = 1; j<accounts[i].size(); j++){
                
                if(mp.find(accounts[i][j]) == mp.end()){
                    mp[accounts[i][j]] = i;
                }
                else{
                    ds.unionBySize(mp[accounts[i][j]] , i);
                }
            }
        }
        
        
        
        vector<vector<string>> mergedMail(n);
        
        for(auto it : mp){
            string mail = it.first;
            int node = ds.findUParent(it.second);
            
            mergedMail[node].push_back(mail);
        }
        
        
        
        vector<vector<string>> ans;
        
        for(int i = 0; i<n; i++){
            
            if(mergedMail[i].size() == 0) continue;
            
            sort(mergedMail[i].begin(), mergedMail[i].end());
            vector<string> temp;
            temp.push_back(accounts[i][0]);
            for(auto it : mergedMail[i]){
                temp.push_back(it);
            }
            
            ans.push_back(temp);
        }
        
        return ans;
        
    }
};

