class DisjointSet {

    vector<int> parent;
    vector<int> size; // no of nodes in the component under that parent

public :

    DisjointSet(int n){

        parent.resize(n+1);
        size.resize(n+1, 1);

        for(int i=0; i<=n ;i++){
            parent[i] = i;
        }
    }

    int findUParent(int node){

        if(node == parent[node]){
            return node;
        }

        return parent[node] = findUParent(parent[node]); // compression by storing the ultimate- parent

    }

    

    void unionBySize(int u, int v){

        int pu = findUParent(u);
        int pv = findUParent(v);

        if(pu == pv) return;

        if(size[pu] < size[pv]){
            parent[pu] = pv;
            size[pv] += size[pu]; // when components are attached then the no of nodes also adds up.
        }
        else if(size[pu] > size[pv]){
            parent[pv] = pu;
            size[pu] += size[pv];
        }
        else {
            parent[pu] = pv;
            size[pv] += size[pu];
        }
    }

};


class Solution {
    
  private:
  
    bool isInsideMatrix(int nrow, int ncol, int n, int m) {
        
        return (nrow >=0 && nrow<n && ncol>=0 && ncol<m) ? true : false;
        
    }
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        
        
        int vis[n][m];
        memset(vis, 0, sizeof vis);
        
        DisjointSet ds(n * m);
        
        vector<int> ans;
        int count = 0;
        
        for(auto it : operators){
            
            int row = it[0];
            int col = it[1];
            
            if(vis[row][col] == 1) {
                ans.push_back(count);
                continue;
            }
            
            vis[row][col] = 1;
            count++;
            
            
            int delr[] = {0, -1, 0, 1};
            int delc[] = {-1, 0, 1, 0};
            
            for(int i =0; i<4; i++){
                int nrow = row + delr[i];
                int ncol = col + delc[i];
                
                if(isInsideMatrix(nrow, ncol, n, m) && vis[nrow][ncol] == 1){
                    
                    int nodeNo = row * m + col;
                    int cnodeNo = nrow * m + ncol;
                    
                    if(ds.findUParent(nodeNo) != ds.findUParent(cnodeNo)){
                        count--;
                        ds.unionBySize(nodeNo, cnodeNo);
                    }
                    
                }
            }
            ans.push_back(count);
        }
        
        return ans;
    }
};
