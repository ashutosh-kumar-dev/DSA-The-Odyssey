
class Solution {
  public:
    // Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[]) {
        
        
        priority_queue<pair<int,pair<int, int>> , vector<pair<int, pair<int, int>>>, greater<pair<int,pair<int, int>>>> pq;
        
        vector<int> vis(V, 0);
        vector<pair<int, int>> mst;
        
        pq.push({0, {0, -1}});
        int sum = 0;
        
        while(!pq.empty()){
            
            int node = pq.top().second.first;
            int parent = pq.top().second.second;
            int wt = pq.top().first;
            
            pq.pop();
            
            if( vis[node] == 1) continue;
            
            vis[node] = 1;
            sum += wt;
            mst.push_back({node, parent});
            
            for(auto it : adj[node]){
                int cnode = it[0];
                int ew = it[1];
                
                if(vis[cnode] !=1 ) { // only visited condition not disjkstera condition because 
                                    //in forming the spannig tree we need all the level nodes, 
                                    //if taken the minim here then may be after this node nothing is connected
                                      // but hte spannig path may be from other node of the same level.
                                      // also as it is priority que it will take care of the the minim  
                    pq.push({ew, {cnode, node}});
                }
            }
        }


        // this is the mst edge relation
        for(auto it : mst){
            
            cout<< it.first << " " << it.second << endl;
        }
        
        return sum;
        
        
        
    }
};
