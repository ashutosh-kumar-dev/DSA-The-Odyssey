// sort the edges accoring to the wt;
// then choose each edge and
// then make the union of the u,v by disjoint set union DSU.


class DisjointSet {

    vector<int> parent;
    vector<int> size; // no of nodes in the component under that parent

public :

    DisjointSet(int n){

        parent.resize(n+1);
        size.resize(n+1, 1);

        for(int i=0; i<=n ;i++){
            parent[i] = i;
        }
    }

    int findUParent(int node){

        if(node == parent[node]){
            return node;
        }

        return parent[node] = findUParent(parent[node]); // compression by storing the ultimate- parent

    }

    void unionBySize(int u, int v){

        int pu = findUParent(u);
        int pv = findUParent(v);

        if(pu == pv) return;

        if(size[pu] < size[pv]){
            parent[pu] = pv;
            size[pv] += size[pu]; // when components are attached then the no of nodes also adds up.
        }
        else if(size[pu] > size[pv]){
            parent[pv] = pu;
            size[pu] += size[pv];
        }
        else {
            parent[pu] = pv;
            size[pv] += size[pu];
        }
    }

};



class Solution {
  public:
    // Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[]) {
        
        vector<pair<int, pair<int, int>>> edges; // {wt, {u,v}}
        
        for(int i=0; i<V; i++){
            for( auto it : adj[i]){
                edges.push_back({it[1], {i, it[0]}});
            }
        }
        
        
        sort(edges.begin(), edges.end());
        
        DisjointSet ds(V);
        
        int mst = 0;
        
        for(auto it : edges){
            
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;
            
            if( ds.findUParent(u) != ds.findUParent(v)){
                mst += wt;
                
                ds.unionBySize(u, v);
            }
        }
        
        return mst;
       
    }
};
