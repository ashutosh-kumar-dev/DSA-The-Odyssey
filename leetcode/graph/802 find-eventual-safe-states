class Solution {

bool dfs(int node, vector<int> &vis, vector<vector<int>>& graph, vector<int> &pathVis,
            vector<int> &safeNodes){

    vis[node] = 1;
    pathVis[node] = 1;

    for(int cnode : graph[node]){

        //safeNodes[node] = 0
        // by default all the nodes are not safe ..... the nodes with are in the path of notLoop.. are safe nodes
        // like when we are reverse comming we make all notLoop nodes's pathVis[node] = 0 .. in same way safenode[node] = 1;

        if(vis[cnode] !=1){
            if(dfs(cnode, vis, graph, pathVis, safeNodes) == true) return true;
        }
        else if(pathVis[cnode] == 1 ){
            return true;
        }
    }

    safeNodes[node] = 1;
    pathVis[node] = 0;

    return false;
}
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {

        int n = graph.size();
        vector<int> vis(n, 0);
        vector<int> pathVis(n, 0);

        vector<int> safeNodes(n,0);


        for(int i = 0; i<n; i++){
            if(vis[i] !=1 ){

                dfs(i, vis, graph, pathVis, safeNodes);

            }
        }

        vector<int> ans;
        for(int i=0; i<n; i++){
            if(safeNodes[i] == 1) ans.push_back(i);
        }

        return ans;
        
    }
};
