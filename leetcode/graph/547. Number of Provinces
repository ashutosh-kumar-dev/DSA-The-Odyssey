class DisjointSet {


public :
    vector<int> parent;
    vector<int> size; // no of nodes in the component under that parent

    DisjointSet(int n){

        parent.resize(n+1);
        size.resize(n+1, 1);

        for(int i=0; i<=n ;i++){
            parent[i] = i;
        }
    }

    int findUParent(int node){

        if(node == parent[node]){
            return node;
        }

        return parent[node] = findUParent(parent[node]); // compression by storing the ultimate- parent

    }

    void unionBySize(int u, int v){

        int pu = findUParent(u);
        int pv = findUParent(v);

        if(pu == pv) return;

        if(size[pu] < size[pv]){
            parent[pu] = pv;
            size[pv] += size[pu]; // when components are attached then the no of nodes also adds up.
        }
        else if(size[pu] > size[pv]){
            parent[pv] = pu;
            size[pu] += size[pv];
        }
        else {
            parent[pu] = pv;
            size[pv] += size[pu];
        }
    }

};


class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        
        int n = isConnected.size();

        DisjointSet ds(n);


        for(int i = 0 ; i<n; i++){
            for(int j=0; j<n; j++){

                if(isConnected[i][j] == 1){
                    ds.unionBySize(i ,j);
                }
            }
        }

        int count = 0;
        for(int i =0; i<n; i++){
            if(ds.parent[i] == i) count ++;
        }

        return count;

    }
};
